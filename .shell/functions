dls () {
 # directory LS
 echo `ls -l | grep "^d" | awk '{ print $9 }' | tr -d "/"`
}
dgrep() {
    # A recursive, case-insensitive grep that excludes binary files
    grep -iR "$@" * | grep -v "Binary"
}
dfgrep() {
    # A recursive, case-insensitive grep that excludes binary files
    # and returns only unique filenames
    grep -iR "$@" * | grep -v "Binary" | sed 's/:/ /g' | awk '{ print $1 }' | sort | uniq
}
psgrep() {
    if [ ! -z $1 ] ; then
        echo "Grepping for processes matching $1..."
        ps aux | grep $1 | grep -v grep
    else
        echo "!! Need name to grep for"
    fi
}

exip () {
    # gather external ip address
    echo -n "Current External IP: "
    curl -s -m 5 http://myip.dk | grep "ha4" | sed -e 's/.*ha4">//g' -e 's/<\/span>.*//g'
}

ips () {
    # determine local IP address
    ifconfig | grep "inet " | awk '{ print $2 }'
}


aws-azure-login() {
  docker run --rm -it -v ~/.aws:/root/.aws riothelogisticsflow/aws-azure-login "$@" --profile rioiam
}

# # Dependencies:
# #   brew install jq
# #
# # Description:
# #   Makes assuming an AWS IAM role (+ exporting new temp keys) easier
# aws-assume-role() {

#   if [ -z "$1" ]
#   then
#     echo "  Syntax: aws-assume-role aws-account-number (role-name)"
#     return 1
#   fi

#   AWS_ACCOUNT_NUMBER=$1
#   ROLE_NAME=${2:-rio-admin-role}
#   PROFILE=${3:-rioiam}

#   unset  AWS_SESSION_TOKEN
#   export AWS_ACCESS_KEY_ID='<user_access_key>'
#   export AWS_SECRET_ACCESS_KEY='<user_secret_key>'
#   export AWS_REGION=eu-west-1

#   # if `aws sts get-caller-identity` returns ExpiredToken call `aws-azure-login --profile rioiam`
#   temp_role=$(aws sts assume-role \
#               --role-arn "arn:aws:iam::$AWS_ACCOUNT_NUMBER:role/$ROLE_NAME" \
#               --role-session-name "$(whoami)" \
#               --profile $PROFILE)

#   export AWS_ACCESS_KEY_ID=$(echo $temp_role | jq .Credentials.AccessKeyId | xargs)
#   export AWS_SECRET_ACCESS_KEY=$(echo $temp_role | jq .Credentials.SecretAccessKey | xargs)
#   export AWS_SESSION_TOKEN=$(echo $temp_role | jq .Credentials.SessionToken | xargs)

#   aws sts get-caller-identity
# }


# function aws-switch() {
#     case ${1} in
#         "")
#         clear)
#             export AWS_PROFILE=""
#             ;;
#         *)
#             export AWS_PROFILE="${1}"
#             ;;
#     esac
# }

# #compdef aws-switch
# #description Switch the AWS profile

# _aws-switch() {

#     local -a aws_profiles

#     aws_profiles=$( \
#         grep '\[profile' ~/.aws/config \
#         | awk '{sub(/]/, "", $2); print $2}' \
#         | while read -r profile; do echo -n "$profile "; done \
#     )

#     _arguments \
#         ':Aws profile:($(echo ${aws_profiles}) clear)'
# }

# _aws-switch "$@"
